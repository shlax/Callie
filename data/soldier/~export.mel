proc int isLinearMaped(string $name){
	$arg = `listAttr -st "LinXY" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinXZ" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinYX" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinYZ" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinZX" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinZY" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	return 0;
}

proc int isLinear(string $name){
	string $arg[];
	$arg = `listAttr -st "LinX" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinY" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");
	$arg = `listAttr -st "LinZ" $name`;
	if(size($arg) == 1) return 1;
//	print (size($arg)+"\n");	
	return isLinearMaped($name);
}

proc float getLinear(string $name, string $ax, string $ay, string $az){
	float $retV = 0;
	string $arg[];
	
	$arg = `listAttr -st $ax $name`;
	if(size($arg) == 1){
		$retV = getAttr($name+"."+$ax);
	}

	$arg = `listAttr -st $ay $name`;
	if(size($arg) == 1){
		$retV = getAttr($name+"."+$ay);
	}
	
	$arg = `listAttr -st $az $name`;
	if(size($arg) == 1){
		$retV = getAttr($name+"."+$az);
	}

	//print($name+"."+$ax+"="+$retV);
	return $retV;
}

proc exportJoints(string $name,int $filename){
	
	$is = 0;
	$sep = 0;

	$src_connections = `listConnections -d true -s false -t jointCluster $name`;
	for( $cluster in $src_connections ){
		
		
		$A = `listSets -o $cluster`;
		for( $b in $A ){
		//	print( $b+"\n" );
			select $b;
			$c = `ls -selection`;
			for($q in $c){
				if($is == 0){
					$is = 1;
					//print( $name+"\n" );
					//fprint($filename, "start\n");
					fprint($filename, "start\n"+$name+" ");
			
					int $linear = isLinear($name);
					if($linear == 0){
						fprint($filename, "normal ");
						string $arg;				

						$arg = `getAttr ($name+".translateX")`;
						fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".translateY")`;
						fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".translateZ")`;
						fprint($filename, $arg);


						$arg = `getAttr ($name+".rotateX")`;
					//	fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".rotateY")`;
					//	fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".rotateZ")`;
					//	fprint($filename, $arg);
					}else{
						fprint($filename, "linear ");

						float $vatL = getLinear($name, "LinX", "LinXY", "LinXZ");
						//print($name+".="+$vatL);
						fprint($filename, $vatL+" ");

						$vatL = getLinear($name, "LinY", "LinYX", "LinYZ");
						fprint($filename, $vatL+" ");
						//print($name+".="+$vatL);

						$vatL = getLinear($name, "LinZ", "LinZX", "LinZY");
						fprint($filename, $vatL);
						//print($name+".="+$vatL);

						if( isLinearMaped($name) ){
							$arg = `listAttr -st "LinXY" $name`;
							if(size($arg) == 1){
								fprint($filename, " x y");
							}
							$arg = `listAttr -st "LinXZ" $name`;
							if(size($arg) == 1){
								fprint($filename, " x z");
							}
							$arg = `listAttr -st "LinYX" $name`;
							if(size($arg) == 1){
								fprint($filename, " y x");
							}
							$arg = `listAttr -st "LinYZ" $name`;
							if(size($arg) == 1){
								fprint($filename, " y z");
							}
							$arg = `listAttr -st "LinZX" $name`;
							if(size($arg) == 1){
								fprint($filename, " z x");
							}
							$arg = `listAttr -st "LinZY" $name`;
							if(size($arg) == 1){
								fprint($filename, " z y");
							}
						}
					}
					fprint $filename "\n";
				}
				// polySurface4.vtx[178]
				// polySurface4.vtx[178:179]
				
			//	print($q+"\n");
				string $tmpTmp = $q;
				
				string $buff[];
				tokenize($tmpTmp, "[:]", $buff);
				
				int $qwe;
				int $max;
				if($buff[2] == ""){
					$max = $buff[1];
				}else{
					$max = $buff[2];
					
				}
				for($qwe = $buff[1]; $qwe <= $max; $qwe++ ){
					if($sep == 0){
						$sep = 1;
					}else{
						fprint $filename ",";
					}
					fprint $filename $qwe;
				}
			}
			
		}
		fprint $filename "\n";
	}
	

	$src_connections = `listConnections -d true -s false -t joint $name`;
	for($joint in $src_connections){
		exportJoints($joint, $filename);
	}
	
	if($is == 1){
		fprint $filename "end\n";	
	}	

}

proc exportJointsFile(string $name,string $filename){
	int $file = `fopen $filename "w"`;

	exportJoints($name, $file);

	fclose $file;	
}

exportJointsFile("joint1", "c:\\Users\\root\\IdeaProjects\\callie\\data\\soldier\\soldier.bon")

proc exportJointsAngels(string $name,int $filename, int $height){
	
	$is = 0;
	$sep = 0;

	$src_connections = `listConnections -d true -s false -t jointCluster $name`;
	for( $cluster in $src_connections ){
		
		
		$A = `listSets -o $cluster`;
		for( $b in $A ){
			select $b;
			$c = `ls -selection`;
			for($q in $c){
				if($is == 0){
					$is = 1;
					fprint($filename, $name+" ");
						
					string $arg;					

					if($height == 1){
						$arg = `getAttr ($name+".translateX")`;
						fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".translateY")`;
						fprint($filename, $arg+" ");

						$arg = `getAttr ($name+".translateZ")`;
						fprint($filename, $arg+" ");

					}

					$arg = `getAttr ($name+".rotateX")`;
					fprint($filename, $arg+" ");

					$arg = `getAttr ($name+".rotateY")`;
					fprint($filename, $arg+" ");

					$arg = `getAttr ($name+".rotateZ")`;
					fprint($filename, $arg+"\n");

				}				
			}
			
		}
	}
	

	$src_connections = `listConnections -d true -s false -t joint $name`;
	for($joint in $src_connections){
		int $lin = isLinear($joint);
		if($lin == 0) exportJointsAngels($joint, $filename, false);
	}
		

}

proc exportJointsAngelsFile(string $name,string $filename){

	int $file = `fopen $filename "w"`;

	exportJointsAngels($name, $file, 1);

	fclose $file;

}


currentTime 300 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/dead.ang");

currentTime 290 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/stand.ang");

currentTime 110 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/run1.ang");

currentTime 120 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/run2.ang");

currentTime 130 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/run3.ang");

currentTime 140 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/run4.ang");

currentTime 160 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/rotate1.ang");

currentTime 180 ;
exportJointsAngelsFile("joint1", "c:/Users/root/IdeaProjects/callie/data/soldier/rotate2.ang");


proc exportSkin( string $mesh, string $filename ){
	float $EP = 0.00001;

	$file = `fopen $filename "w"`;
	
	// vertex
	int $vertexCount[] = `polyEvaluate -v $mesh`;
	fprint $file ( "numVertices=" + $vertexCount[0] + "\n" );
	
	for( $i=0;$i<$vertexCount[0];$i++){
		float $vert[]   = `getAttr ($mesh+".vt["+$i+"]")`;
		float $offset[] = `getAttr ($mesh+".pt["+$i+"]")`;
		
		$vert[0] += $offset[0];
		$vert[1] += $offset[1];
		$vert[2] += $offset[2];
		
		fprint $file ( "["+$vert[0]+","+$vert[1]+","+$vert[2]+"]" );
	}
	fprint $file "\n";
	
	// uv
	
	float $uvArray[];
	$maxUvCount = 0;
	
	int $uvCount[] = `polyEvaluate -uv $mesh`;
	
	for( $i=0;$i<$uvCount[0];$i++){
		float $uvs[] = `getAttr ($mesh + ".uv[" +$i+"]")`;		
		
		int $is = 0;
		for($k = 0; $k < $maxUvCount && $is == 0 ; $k +=2 ){
			if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
				$is = 1;
			}
		}
		if($is == 0){
			$uvArray[$maxUvCount] = $uvs[0];
			$uvArray[$maxUvCount+1] = $uvs[1];
			
			$maxUvCount += 2;
		}
		
		
	}
	
	fprint $file ( "numTexCoords=" + ($maxUvCount/2) + "\n" );
	for($k = 0; $k < $maxUvCount; $k +=2 ){
		fprint $file ( "["+$uvArray[$k]+","+$uvArray[$k+1]+"]" );	
	}	
	fprint $file "\n";
	
	// normal
	
	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	
	int $normArrayVertex[];
	float $normArray[];
	$maxCount = 0;
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			for($k = 0; $k < $maxCount && $is == 0 ; $k ++ ){
				if( $normArrayVertex[$k] == $split[(2+$j)] && abs($normArray[$k*3] - $norm[0]) < $EP && abs($normArray[($k*3)+1] - $norm[1]) < $EP && abs($normArray[($k*3)+2] - $norm[2]) < $EP ){
					$is = 1;
				}
			}
			if($is == 0){
				$normArray[$maxCount*3] = $norm[0];
				$normArray[($maxCount*3)+1] = $norm[1];
				$normArray[($maxCount*3)+2] = $norm[2];
				
				$normArrayVertex[$maxCount] = $split[(2+$j)];
				
				$maxCount ++;
			}

		}
		
	}
	
	fprint $file ( "numNormals="+($maxCount)+"\n" );

	for($k = 0; $k < $maxCount; $k ++ ){
		fprint $file ( "["+$normArray[$k*3]+","+$normArray[($k*3)+1]+","+$normArray[($k*3)+2]+"]" );	
	}
	
	fprint $file "\n";

	// faces

	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	fprint $file ( "numFaces=" + $faceCount[0]+"\n" );
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		fprint $file "{";
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			int $nIndex = -1;
			for($k = 0; $k < $maxCount && $is == 0 ; $k ++ ){
				if( $normArrayVertex[$k] == $split[(2+$j)] && abs($normArray[$k*3] - $norm[0]) < $EP && abs($normArray[($k*3)+1] - $norm[1]) < $EP && abs($normArray[($k*3)+2] - $norm[2]) < $EP ){
					$is = 1;
					$nIndex = $k;
				}
			}
			
			string $tinds[] = `polyListComponentConversion -fvf -tuv ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]")`;
			
			string $buffer[];
			tokenize $tinds[0] "[]" $buffer;
			
			float $uvs[] = `getAttr ($mesh + ".uv[" +($buffer[1])+"]")`;			
		
			$is = 0;
			int $uvIndex = -1;
			for($k = 0; $k < $maxUvCount && $is == 0 ; $k +=2 ){
				if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
					$is = 1;
					$uvIndex = $k/2;
				}
			}
			
			fprint $file ( "["+$split[(2+$j)]+","+$uvIndex+","+$nIndex+"]" );

		}
		fprint $file "}";

	}	
	fprint $file "\n";
	
	fclose $file;
}

exportSkin("polySurface2x", "c:\\Users\\root\\IdeaProjects\\callie\\data\\soldier\\soldier.skn");
