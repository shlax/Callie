proc exportMap( string $mesh, string $filename ){

	$file = `fopen $filename "w"`;
	
	// vertex
	int $vertexCount[] = `polyEvaluate -v $mesh`;
	fprint $file ( "numVertices=" + $vertexCount[0] + "\n" );
	
	for( $i=0;$i<$vertexCount[0];$i++){
		float $vert[]   = `getAttr ($mesh+".vt["+$i+"]")`;
		float $offset[] = `getAttr ($mesh+".pt["+$i+"]")`;
		
		$vert[0] += $offset[0];
		$vert[1] += $offset[1];
		$vert[2] += $offset[2];
		
	
		fprint $file ( "["+$vert[0]+","+$vert[1]+","+$vert[2]+"]" );
	}
	fprint $file "\n";
	
	// faces

	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	fprint $file ( "numFaces=" + $faceCount[0]+"\n" );
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		fprint $file "{";
		for($j=0;$j<(size($split)-2);$j++){		
			if($j != 0)fprint $file ",";

			fprint $file ( $split[(2+$j)] );

		}
		fprint $file "}";

	}	
	fprint $file "\n";

	
	fclose $file;
}

proc export( string $mesh, string $filename ){
	float $EP = 0.00001;

	$file = `fopen $filename "w"`;
	
	// vertex
	int $vertexCount[] = `polyEvaluate -v $mesh`;
	fprint $file ( "numVertices=" + $vertexCount[0] + "\n" );
	
	for( $i=0;$i<$vertexCount[0];$i++){
		float $vert[]   = `getAttr ($mesh+".vt["+$i+"]")`;
		float $offset[] = `getAttr ($mesh+".pt["+$i+"]")`;
		
		$vert[0] += $offset[0];
		$vert[1] += $offset[1];
		$vert[2] += $offset[2];
		
	
		fprint $file ( "["+$vert[0]+","+$vert[1]+","+$vert[2]+"]" );
	}
	fprint $file "\n";
	
	// uv
	
	float $uvArray[];
	$maxUvCount = 0;
	
	int $uvCount[] = `polyEvaluate -uv $mesh`;
	
	for( $i=0;$i<$uvCount[0];$i++){
		float $uvs[] = `getAttr ($mesh + ".uv[" +$i+"]")`;
		
		int $is = 0;
		for($k = 0; $k < $maxUvCount && $is == 0 ; $k +=2 ){
			if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
				$is = 1;
			}
		}
		if($is == 0){
			$uvArray[$maxUvCount] = $uvs[0];
			$uvArray[$maxUvCount+1] = $uvs[1];
			
			$maxUvCount += 2;
		}
		
		
	}
	
	fprint $file ( "numTexCoords=" + ($maxUvCount/2) + "\n" );
	for($k = 0; $k < $maxUvCount; $k +=2 ){
		fprint $file ( "["+$uvArray[$k]+","+$uvArray[$k+1]+"]" );	
	}	
	fprint $file "\n";
	
	// normal
	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	
	float $normArray[];
	$maxCount = 0;
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			for($k = 0; $k < $maxCount && $is == 0 ; $k +=3 ){
				if( abs($normArray[$k] - $norm[0]) < $EP && abs($normArray[$k+1] - $norm[1]) < $EP && abs($normArray[$k+2] - $norm[2]) < $EP ){
					$is = 1;
				}
			}
			if($is == 0){
				$normArray[$maxCount] = $norm[0];
				$normArray[$maxCount+1] = $norm[1];
				$normArray[$maxCount+2] = $norm[2];
				
				$maxCount += 3;
			}

		}
		
	}
	
	fprint $file ( "numNormals="+($maxCount/3)+"\n" );

	for($k = 0; $k < $maxCount; $k +=3 ){
		fprint $file ( "["+$normArray[$k]+","+$normArray[$k+1]+","+$normArray[$k+2]+"]" );	
	}
	
	fprint $file "\n";

	// faces

	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	fprint $file ( "numFaces=" + $faceCount[0]+"\n" );
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		fprint $file "{";
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			int $nIndex = -1;
			for($k = 0; $k < $maxCount && $is == 0 ; $k +=3 ){
				if( abs($normArray[$k] - $norm[0]) < $EP && abs($normArray[$k+1] - $norm[1]) < $EP && abs($normArray[$k+2] - $norm[2]) < $EP ){
					$is = 1;
					$nIndex = $k/3;
				}
			}

			string $tinds[] = `polyListComponentConversion -fvf -tuv ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]")`;
			
			string $buffer[];
			tokenize $tinds[0] "[]" $buffer;
			
			float $uvs[] = `getAttr ($mesh + ".uv[" +($buffer[1])+"]")`;			
		
			$is = 0;
			int $uvIndex = -1;
			for($k = 0; $k < $maxUvCount && $is == 0 ; $k +=2 ){
				if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
					$is = 1;
					$uvIndex = $k/2;
				}
			}
			
			fprint $file ( "["+$split[(2+$j)]+","+$uvIndex+","+$nIndex+"]" );
		//	fprint $file ( "["+$split[(2+$j)]+","+$buffer[1]+","+$nIndex+"]" );

		}
		fprint $file "}";

	}	
	fprint $file "\n";

	
	fclose $file;
}

proc exportMulti( string $mesh, string $filename, string $uvNames[] ){
	float $EP = 0.00001;

	$file = `fopen $filename "w"`;
	
	// vertex
	int $vertexCount[] = `polyEvaluate -v $mesh`;
	fprint $file ( "numVertices=" + $vertexCount[0] + "\n" );
	
	for( $i=0;$i<$vertexCount[0];$i++){
		float $vert[]   = `getAttr ($mesh+".vt["+$i+"]")`;
		float $offset[] = `getAttr ($mesh+".pt["+$i+"]")`;
		
		$vert[0] += $offset[0];
		$vert[1] += $offset[1];
		$vert[2] += $offset[2];
		
	
		fprint $file ( "["+$vert[0]+","+$vert[1]+","+$vert[2]+"]" );
	}
	fprint $file "\n";
	
	// uv

	float $uvArray[];
	int $maxUvCountPer[];
	int $maxUvCount = 0;
	
	for($uvIndexSet = 0; $uvIndexSet < size($uvNames); $uvIndexSet++){
		$maxUvCountPer[$uvIndexSet] = $maxUvCount;

		//int $startIndex = $maxUvCount;

		polyUVSet -currentUVSet -uvSet $uvNames[$uvIndexSet] $mesh;
		
		int $uvCount[] = `polyEvaluate -uv $mesh`;
		
		for( $i=0;$i<$uvCount[0];$i++){
			float $uvs[] = `getAttr ($mesh + ".uv[" +$i+"]")`;
			
			int $is = 0;
			for($k = $maxUvCountPer[$uvIndexSet]; $k < $maxUvCount && $is == 0 ; $k +=2 ){				
				if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
					$is = 1;
				}
			}
			if($is == 0){
				$uvArray[$maxUvCount] = $uvs[0];
				$uvArray[$maxUvCount+1] = $uvs[1];
				
				$maxUvCount += 2;
			}
			
			
		}
	}

	// uvs
	fprint $file ( "numTex=" + size($uvNames) + "\n" );
	
	for($uvIndexSet = 0; $uvIndexSet < size($uvNames); $uvIndexSet++){
		int $endIndex = $maxUvCount;
		if($uvIndexSet < (size($uvNames) - 1)){
			$endIndex = $maxUvCountPer[$uvIndexSet + 1];
		}

		fprint $file ( "numTexCoords=" + (($endIndex - $maxUvCountPer[$uvIndexSet]) / 2) + "\n" );


		for($k = $maxUvCountPer[$uvIndexSet]; $k < $endIndex; $k +=2 ){
			fprint $file ( "["+$uvArray[$k]+","+$uvArray[$k+1]+"]" );	
		}	
		fprint $file "\n";	
	}
	
	// normal
	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	
	float $normArray[];
	$maxCount = 0;
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			for($k = 0; $k < $maxCount && $is == 0 ; $k +=3 ){
				if( abs($normArray[$k] - $norm[0]) < $EP && abs($normArray[$k+1] - $norm[1])  < $EP && abs($normArray[$k+2] - $norm[2])  < $EP ){
					$is = 1;
				}
			}
			if($is == 0){
				$normArray[$maxCount] = $norm[0];
				$normArray[$maxCount+1] = $norm[1];
				$normArray[$maxCount+2] = $norm[2];
				
				$maxCount += 3;
			}

		}
		
	}
	
	fprint $file ( "numNormals="+($maxCount/3)+"\n" );

	for($k = 0; $k < $maxCount; $k +=3 ){
		fprint $file ( "["+$normArray[$k]+","+$normArray[$k+1]+","+$normArray[$k+2]+"]" );	
	}
	
	fprint $file "\n";

	

	// faces

	select -r $mesh;
	int $faceCount[] = `polyEvaluate -f`;
	fprint $file ( "numFaces=" + $faceCount[0]+"\n" );
	
	for( $i=0;$i<$faceCount[0];$i++){
		int $vCount =0;
		
		select -r ( $mesh+".f["+$i+"]");
		
		string $vinds[] = `polyInfo -fv`;
		
		string $split[];
		tokenize $vinds[0] $split;
		
		fprint $file "{";
		for($j=0;$j<(size($split)-2);$j++){
			select -r ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]");
			float $norm[] = `polyNormalPerVertex -q -xyz`;
			
			int $is = 0;
			int $nIndex = -1;
			for($k = 0; $k < $maxCount && $is == 0 ; $k +=3 ){
				if( abs($normArray[$k] - $norm[0]) < $EP && abs($normArray[$k+1] - $norm[1]) < $EP && abs($normArray[$k+2] - $norm[2]) < $EP ){
					$is = 1;
					$nIndex = $k/3;
				}
			}

			fprint $file ( "["+$split[(2+$j)]+",(" );
			
			for($uvIndexSet = 0; $uvIndexSet < size($uvNames); $uvIndexSet++){
				polyUVSet -currentUVSet -uvSet $uvNames[$uvIndexSet] $mesh;

				string $tinds[] = `polyListComponentConversion -fvf -tuv ($mesh+".vtxFace["+$split[($j+2)]+"]["+$i+"]")`;
			
				string $buffer[];
				tokenize $tinds[0] "[]" $buffer;

				float $uvs[] = `getAttr ($mesh + ".uv[" +($buffer[1])+"]")`;			
		
				$is = 0;
				int $uvIndex = -1;
				
				int $endIndex = $maxUvCount;
				if($uvIndexSet < (size($uvNames) - 1)){
					$endIndex = $maxUvCountPer[$uvIndexSet + 1];
				}

				for($k = $maxUvCountPer[$uvIndexSet]; $k < $endIndex && $is == 0 ; $k +=2 ){
					if( abs($uvArray[$k] - $uvs[0]) < $EP && abs($uvArray[$k+1] - $uvs[1]) < $EP ){
						$is = 1;
						$uvIndex = ($k - $maxUvCountPer[$uvIndexSet])/2;
					}
				} 

				if($uvIndexSet != 0) fprint $file ( ";" );
				fprint $file ( $uvIndex );				

			}		
			fprint $file ( "),"+$nIndex+"]" );

		//	fprint $file ( "["+$split[(2+$j)]+","+$buffer[1]+","+$nIndex+"]" );

		}
		fprint $file "}";

	}	
	fprint $file "\n";

	
	fclose $file;
}


//export( "pPlane6", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\roof.mod" );

exportMap("polySurface163","c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\run.str");
exportMap("polySurface134","c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\jump.str");

//export( "polySurface145", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\tools.mod" );
//export( "polySurface138", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\floor.mod" );
//export( "polySurface142", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\outerWall.mod" );
//export( "polySurface136", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\brix.mod" );
//export( "polySurface143", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\wall.mod" );
//export( "polySurface141", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\ceiling.mod" );
//export( "pPlane5", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\road.mod" );
string $uvNames[2] = {"map1", "light"};
exportMulti( "polySurface145", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\tools.mto", $uvNames );
exportMulti( "polySurface142", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\outerWall.mto", $uvNames );
exportMulti( "polySurface141", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\ceiling.mto", $uvNames );
exportMulti( "polySurface143", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\wall.mto", $uvNames );
exportMulti( "polySurface138", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\floor.mto", $uvNames );
exportMulti( "polySurface136", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\brix.mto", $uvNames  );
exportMulti( "pPlane5", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\road.mto", $uvNames );
exportMulti( "polySurface160", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\barel.mto", $uvNames );

//string $uvNames[2] = {"map1", "light"};
exportMulti( "polySurface155", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\trash.mto", $uvNames );
exportMulti( "polySurface149", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\wood.mto", $uvNames );

export( "polySurface159", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\paprad.mod" );

export( "polySurface147", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\cloud.mod" );

export( "polySurface146", "c:\\Users\\root\\IdeaProjects\\callie\\data\\house\\skyBox.mod" );